name: Build and Release EXE

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build-exe:
    name: Build EXE (${{ matrix.arch }})
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [x64, x86]
        include:
          - arch: x64
            python_arch: x64
          - arch: x86
            python_arch: x86

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 获取完整提交历史
      
    # ... (保留 build-exe 的其他步骤不变)

  create-release:
    name: Create Release
    needs: build-exe
    runs-on: ubuntu-latest
    
    steps:
    # 1. 首先必须重新 checkout 代码
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 获取完整提交历史
    
    # ... (保留下载 artifact 和验证的步骤不变)
    
    - name: Get commit messages since last tag
      id: get-commits
      run: |
        # 设置 Git 用户信息（避免警告）
        git config --global user.email "action@github.com"
        git config --global user.name "GitHub Action"
        
        # 获取所有标签（确保最新标签被获取）
        git fetch --tags --force
        
        # 获取前一个标签
        previous_tag=$(git describe --tags --abbrev=0 ${{ github.ref_name }}^ 2>/dev/null || echo "")
        
        if [ -z "$previous_tag" ]; then
          # 如果是第一个标签，获取初始提交到当前标签的所有提交
          first_commit=$(git rev-list --max-parents=0 HEAD)
          messages=$(git log --pretty=format:"- %s (提交人: %an, 提交ID: %h)" --reverse $first_commit..${{ github.ref_name }})
          echo "这是第一个标签，包含从初始提交到当前的所有更改"
        else
          # 否则获取两个标签之间的提交
          messages=$(git log --pretty=format:"- %s (提交人: %an, 提交ID: %h)" --reverse $previous_tag..${{ github.ref_name }})
          echo "比较范围: $previous_tag..${{ github.ref_name }}"
        fi
        
        # 使用 heredoc 格式正确输出多行文本
        delimiter=$(date +%s | sha256sum | base64 | head -c 10)
        echo "messages<<${delimiter}" >> $GITHUB_OUTPUT
        echo "$messages" >> $GITHUB_OUTPUT
        echo "${delimiter}" >> $GITHUB_OUTPUT

    # ... (保留创建 release 的步骤不变)