name: Build and Release Multi-Platform

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build-windows:
    name: Build Windows (${{ matrix.arch }})
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [x64, x86]
        include:
          - arch: x64
            python_arch: x64
            artifact_suffix: "windows-x64"
            file_ext: ".exe"
          - arch: x86
            python_arch: x86
            artifact_suffix: "windows-x86"
            file_ext: ".exe"
    steps:
      - uses: actions/checkout@v4
      
      - name: Clean workspace
        run: Remove-Item -Recurse -Force build, dist, __pycache__ -ErrorAction SilentlyContinue

      - name: Generate version info
        run: |
          $version = $env:GITHUB_REF_NAME.Substring(1)
          $versionParts = $version.Split('.')
          $major = if ($versionParts.Count -ge 1) { $versionParts[0] } else { 0 }
          $minor = if ($versionParts.Count -ge 2) { $versionParts[1] } else { 0 }
          $patch = if ($versionParts.Count -ge 3) { $versionParts[2] } else { 0 }
          
          @"
          VS_VERSION_INFO VERSIONINFO
          FILEVERSION     $major, $minor, $patch, 0
          PRODUCTVERSION  $major, $minor, $patch, 0
          BEGIN
            BLOCK "StringFileInfo"
            BEGIN
              BLOCK "040904E4"
              BEGIN
                VALUE "CompanyName", "Still_Alive and WaiJade"
                VALUE "FileDescription", "OK School Life"
                VALUE "FileVersion", "$version"
                VALUE "LegalCopyright", "Copyright (C) 2024. Still_Alive and WaiJade"
                VALUE "ProductName", "OK School Life"
                VALUE "ProductVersion", "$version"
              END
            END
            BLOCK "VarFileInfo"
            BEGIN
              VALUE "Translation", 0x409, 1252
            END
          END
          "@ | Out-File -Encoding ASCII version.rc

      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          architecture: ${{ matrix.python_arch }}
        
      - run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pyinstaller --onefile --console --version-file version.rc ok_school_life.py
          
          $version = $env:GITHUB_REF_NAME.Substring(1)
          $newName = "ok_school_life-${{ matrix.artifact_suffix }}-$version${{ matrix.file_ext }}"
          Rename-Item -Path "dist\ok_school_life.exe" -NewName $newName
          dir dist

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_suffix }}
          path: dist/ok_school_life-${{ matrix.artifact_suffix }}-*

  build-linux:
    name: Build Linux (${{ matrix.arch }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [x64, arm64]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up QEMU (ARM64 only)
        if: matrix.arch == 'arm64'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64
      
      - name: Set up build environment
        run: |
          sudo apt-get update
          if [ "${{ matrix.arch }}" == "arm64" ]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          fi
      
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Create author info
        run: |
          echo "Authors: Still_Alive and WaiJade" > author_info.txt
          echo "Version: ${GITHUB_REF#refs/tags/v}" >> author_info.txt
      
      - name: Build executable
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          
          if [ "${{ matrix.arch }}" == "arm64" ]; then
            if ! docker run --rm --platform linux/arm64 -v $(pwd):/src -w /src python:3.10-slim \
              sh -c "pip install pyinstaller && pyinstaller --onefile --console --add-data='author_info.txt:.' ok_school_life.py"; then
              
              echo "QEMU构建失败，尝试交叉编译..."
              export CC=aarch64-linux-gnu-gcc
              export CXX=aarch64-linux-gnu-g++
              pyinstaller --onefile --console --add-data='author_info.txt:.' ok_school_life.py
            fi
          else
            pyinstaller --onefile --console --add-data='author_info.txt:.' ok_school_life.py
          fi
          
          version=${GITHUB_REF#refs/tags/v}
          mv dist/ok_school_life "dist/ok_school_life-linux-${{ matrix.arch }}-$version"
          file dist/ok_school_life-linux-${{ matrix.arch }}-*

      - uses: actions/upload-artifact@v4
        with:
          name: linux-${{ matrix.arch }}
          path: dist/ok_school_life-linux-${{ matrix.arch }}-*

  build-macos:
    name: Build macOS (${{ matrix.arch }})
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [x64, arm64]
    steps:
      - uses: actions/checkout@v4
      
      - name: Clean workspace
        run: rm -rf build dist __pycache__

      - name: Create author info
        run: |
          echo "Authors: Still_Alive and WaiJade" > author_info.txt
          echo "Version: ${GITHUB_REF#refs/tags/v}" >> author_info.txt

      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Build executable
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          
          if [ "${{ matrix.arch }}" == "arm64" ]; then
            export ARCHFLAGS="-arch arm64"
          else
            export ARCHFLAGS="-arch x86_64"
          fi
          
          pyinstaller --onefile --console --add-data='author_info.txt:.' ok_school_life.py
          
          version=${GITHUB_REF#refs/tags/v}
          mv dist/ok_school_life "dist/ok_school_life-macos-${{ matrix.arch }}-$version"
          file dist/ok_school_life-macos-${{ matrix.arch }}-*

      - uses: actions/upload-artifact@v4
        with:
          name: macos-${{ matrix.arch }}
          path: dist/ok_school_life-macos-${{ matrix.arch }}-*

  create-release:
    name: Create Release
    needs: [build-windows, build-linux, build-macos]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/download-artifact@v4
        with:
          path: release-files
          merge-multiple: true

      - name: Verify all binaries
        run: |
          echo "=== 可执行文件验证 ==="
          ls -R release-files
          
          # 验证Windows文件元数据
          if command -v exiftool &> /dev/null; then
            echo "=== Windows文件元数据 ==="
            exiftool release-files/ok_school_life-windows-* | grep -E "Author|Creator|Company"
          fi
          
          # 验证Linux/macOS文件包含作者信息
          echo "=== Linux/macOS文件作者信息 ==="
          for f in release-files/ok_school_life-linux-* release-files/ok_school_life-macos-*; do
            echo "检查文件: $f"
            strings "$f" | grep -A 2 "Still_Alive" || echo "未找到作者信息"
          done

          # 新版验证逻辑（精确匹配带版本号的文件）
          declare -a required_files=(
            "ok_school_life-windows-x64-*.exe"
            "ok_school_life-windows-x86-*.exe"
            "ok_school_life-linux-x64-*"
            "ok_school_life-linux-arm64-*"
            "ok_school_life-macos-x64-*"
            "ok_school_life-macos-arm64-*"
          )
          
          missing_files=0
          for pattern in "${required_files[@]}"; do
            matches=(release-files/$pattern)
            if [ ${#matches[@]} -eq 0 ] || [ ! -e "${matches[0]}" ]; then
              echo "❌ 文件匹配失败: $pattern"
              missing_files=1
            else
              echo "✅ 文件存在: ${matches[0]}"
              file "${matches[0]}"
            fi
          done
          
          if [ $missing_files -ne 0 ]; then
            exit 1
          fi
          echo "✅ 所有文件验证通过"

      - name: Generate changelog
        id: changelog
        run: |
          git fetch --tags --force
          current_tag="${{ github.ref_name }}"
          previous_tag=$(git describe --tags --abbrev=0 "$current_tag^" 2>/dev/null || echo "")
          
          if [ -z "$previous_tag" ]; then
            messages=$(git log --reverse --pretty=format:"- %s%n  ↳ 提交人: %an (%h)")
          else
            messages=$(git log --reverse --pretty=format:"- %s%n  ↳ 提交人: %an (%h)" "$previous_tag".."$current_tag")
          fi
          
          delimiter=$(openssl rand -hex 16)
          echo "changelog<<${delimiter}" >> $GITHUB_OUTPUT
          echo "$messages" >> $GITHUB_OUTPUT
          echo "${delimiter}" >> $GITHUB_OUTPUT

      - name: Generate build info
        id: build-info
        run: |
          echo "time=$(TZ='Asia/Shanghai' date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_OUTPUT
          echo "platforms=🪟 Windows (x86/x64) | 🐧 Linux (x64/ARM64) | 🍎 macOS (x64/ARM64)" >> $GITHUB_OUTPUT
          echo "authors=👨‍💻 Still_Alive and WaiJade" >> $GITHUB_OUTPUT

      - uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: "🎉 Release ${{ github.ref_name }}"
          body: |
            ## 📦 多平台构建结果
            
            ### 支持架构
            ${{ steps.build-info.outputs.platforms }}
            
            ### 👥 作者信息
            ${{ steps.build-info.outputs.authors }}
            
            ### 📝 更新日志
            ${{ steps.changelog.outputs.changelog }}
            
            ### 🛠️ 构建信息
            - 🕒 构建时间: ${{ steps.build-info.outputs.time }} (UTC+8)
            - 🏷️ 版本标签: ${{ github.ref_name }}
            - 🔗 提交页面: [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
            
          files: |
            release-files/ok_school_life-*