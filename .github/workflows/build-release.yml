name: Build and Release EXE

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build-exe:
    name: Build EXE
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
    
        
    - name: Build EXE with PyInstaller
      run: |
        # 关键修改：用 --console 代替 --windowed 保留控制台
        # 在 PyInstaller 命令前添加清理步骤
        rm -rf build/ dist/ __pycache__/
        pyinstaller --onefile --console ok_school_life.py
        # 明确验证 EXE 文件
        dir dist\  # Windows 环境使用 dir
        echo "EXE Path: ${{ github.workspace }}\dist\ok_school_life.exe"
        
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: windows-exe
        path: dist/ok_school_life.exe  # 明确指定文件名

  create-release:
    name: Create Release
    needs: build-exe
    runs-on: ubuntu-latest
    
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: windows-exe
        path: release-files
        
    - name: Verify Files (Debug)
      run: |
        echo "=== 文件列表 ==="
        ls -R release-files
        echo "==============="
        # 确保文件存在
        if [ -f "release-files/ok_school_life.exe" ]; then
          echo "EXE 文件存在"
        else
          echo "错误：EXE 文件未找到！"
          exit 1
        fi
        
    - name: Create GitHub Release
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ github.ref_name }}
        name: "Release ${{ github.ref_name }}"
        body: "Automated EXE release"
        artifacts: "release-files/ok_school_life.exe"  # 直接指定确切路径
        token: ${{ secrets.GITHUB_TOKEN }}