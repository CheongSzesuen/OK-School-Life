name: Build and Release Multi-Platform

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  # Windows 构建 (x86/x64)
  build-windows:
    name: Build Windows (${{ matrix.arch }})
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [x64, x86]
        include:
          - arch: x64
            python_arch: x64
            artifact_suffix: "windows-x64"
            file_ext: ".exe"
          - arch: x86
            python_arch: x86
            artifact_suffix: "windows-x86"
            file_ext: ".exe"
    steps:
      - uses: actions/checkout@v4
      
      - name: Clean workspace
        run: Remove-Item -Recurse -Force build, dist, __pycache__ -ErrorAction SilentlyContinue

      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          architecture: ${{ matrix.python_arch }}
        
      - run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pyinstaller --onefile --console ok_school_life.py
          
          $version = $env:GITHUB_REF_NAME.Substring(1)
          $newName = "ok_school_life-${{ matrix.artifact_suffix }}-$version${{ matrix.file_ext }}"
          Rename-Item -Path "dist\ok_school_life.exe" -NewName $newName
          dir dist

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_suffix }}
          path: dist/ok_school_life-${{ matrix.artifact_suffix }}-*

  # Linux 构建 (x86_64/ARM64)
  build-linux:
    name: Build Linux (${{ matrix.arch }})
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        arch: [x64, arm64]
        include:
          - arch: x64
            runner: ubuntu-latest
            artifact_suffix: "linux-x64"
          - arch: arm64
            runner: ubuntu-latest
            artifact_suffix: "linux-arm64"
    container: ${{ matrix.arch == 'arm64' && 'arm64v8/ubuntu:22.04' || '' }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Clean workspace
        run: rm -rf build dist __pycache__

      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pyinstaller --onefile --console ok_school_life.py
          
          version=${GITHUB_REF#refs/tags/v}
          mv dist/ok_school_life "dist/ok_school_life-${{ matrix.artifact_suffix }}-$version"
          ls -lh dist/

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_suffix }}
          path: dist/ok_school_life-${{ matrix.artifact_suffix }}-*

  # macOS 构建 (x64/ARM64)
  build-macos:
    name: Build macOS (${{ matrix.arch }})
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [x64, arm64]
        include:
          - arch: x64
            artifact_suffix: "macos-x64"
          - arch: arm64
            artifact_suffix: "macos-arm64"
    steps:
      - uses: actions/checkout@v4
      
      - name: Clean workspace
        run: rm -rf build dist __pycache__

      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          
          # 针对不同架构设置编译参数
          if [ "${{ matrix.arch }}" == "arm64" ]; then
            export ARCHFLAGS="-arch arm64"
          else
            export ARCHFLAGS="-arch x86_64"
          fi
          
          pyinstaller --onefile --console ok_school_life.py
          
          version=${GITHUB_REF#refs/tags/v}
          mv dist/ok_school_life "dist/ok_school_life-${{ matrix.artifact_suffix }}-$version"
          file dist/ok_school_life-${{ matrix.artifact_suffix }}-*

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_suffix }}
          path: dist/ok_school_life-${{ matrix.artifact_suffix }}-*

  # 创建发布
  create-release:
    name: Create Release
    needs: [build-windows, build-linux, build-macos]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/download-artifact@v4
        with:
          path: release-files
          merge-multiple: true

      - name: Verify all binaries
        run: |
          echo "=== 可执行文件验证 ==="
          ls -R release-files
          
          # 检查所有架构文件
          declare -a platforms=(
            "windows-x64.exe"
            "windows-x86.exe"
            "linux-x64"
            "linux-arm64"
            "macos-x64"
            "macos-arm64"
          )
          
          for platform in "${platforms[@]}"; do
            if ! ls release-files/ok_school_life-${platform}-* >/dev/null 2>&1; then
              echo "❌ ${platform} 可执行文件缺失!"
              exit 1
            else
              echo "✅ ${platform} 文件存在"
              file release-files/ok_school_life-${platform}-*
            fi
          done
          echo "✅ 所有平台文件验证通过"

      - name: Generate changelog
        id: changelog
        run: |
          git fetch --tags --force
          current_tag="${{ github.ref_name }}"
          previous_tag=$(git describe --tags --abbrev=0 "$current_tag^" 2>/dev/null || echo "")
          
          if [ -z "$previous_tag" ]; then
            messages=$(git log --reverse --pretty=format:"- %s%n  ↳ 提交人: %an (%h)")
          else
            messages=$(git log --reverse --pretty=format:"- %s%n  ↳ 提交人: %an (%h)" "$previous_tag".."$current_tag")
          fi
          
          delimiter=$(openssl rand -hex 16)
          echo "changelog<<${delimiter}" >> $GITHUB_OUTPUT
          echo "$messages" >> $GITHUB_OUTPUT
          echo "${delimiter}" >> $GITHUB_OUTPUT

      - name: Generate build info
        id: build-info
        run: |
          echo "time=$(TZ='Asia/Shanghai' date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_OUTPUT
          echo "platforms=🪟 Windows (x86/x64) | 🐧 Linux (x64/ARM64) |  macOS (x64/ARM64)" >> $GITHUB_OUTPUT

      - uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: "🚀 Release ${{ github.ref_name }}"
          body: |
            ## 📦 多平台构建结果
            
            ### 支持架构
            ${{ steps.build-info.outputs.platforms }}
            
            ### 📝 更新日志
            ${{ steps.changelog.outputs.changelog }}
            
            ### 🛠️ 构建信息
            - 🕒 构建时间: ${{ steps.build-info.outputs.time }} (UTC+8)
            - 🏷️ 版本标签: ${{ github.ref_name }}
            - 🔗 提交哈希: [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
            
            ### 🔍 文件验证
            ```bash
            # 检查文件类型
            file ok_school_life-*
            ```
          files: |
            release-files/ok_school_life-*